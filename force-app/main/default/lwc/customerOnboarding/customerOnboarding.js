import { LightningElement, track, wire } from 'lwc';
import insertnewaccount from '@salesforce/apex/CustomerOnboardingNewAccount.Createnewaccount';
import uploadFile from '@salesforce/apex/CustomerOnboardingNewAccount.uploadFile';
import searchAccounts from '@salesforce/apex/CustomerOnboardingNewAccount.searchAccounts';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import getAccountRecordTypes from '@salesforce/apex/CustomerOnboardingNewAccount.getAccountRecordTypes';
import searchBranches from '@salesforce/apex/DeposistsRecordCreation.searchBranches';
import checkIfAccountExists from '@salesforce/apex/CustomerOnboardingNewAccount.checkDuplicateAccount';
import createJointApplicantsss from '@salesforce/apex/CustomerOnboardingNewAccount.createJointApplicants';
import { NavigationMixin } from 'lightning/navigation';
export default class CustomerOnboarding extends NavigationMixin(LightningElement) {
    @track steps = [
        { label: 'Step 1: Personal Info', value: 'step1' },
        { label: 'Step 2: Account Details', value: 'step2' },
        // { label: 'Step 3: Nominee Details', value: 'step3' },
        { label: 'Step 3: Document Upload', value: 'step3' },
        { label: 'Step 4: Review', value: 'step4' }
    ];

    @track jointAppNames = ['', '', ''];  // Array for joint applicant names
    @track phoneNumbers = ['', '', ''];   // Array for joint applicant phone numbers
    accountId;
    @track sendotpbutton = false;
    @track sendaadharotpbutton = false;
    @track showAadhar = false;
    @track debitCard = false;
    @track creditCard = false;
    @track cardType = '';
    @track currentStep = 'step1';
    @track searchTerm = '';
    @track accounts = [];
    @track selectedAccountId;
    @track HomeBranch = '';
    @track branches = [];
    @track searchK = '';
    firstName = '';
    lastName = '';
    email = '';
    fathersName = '';
    mothersName = '';
    mothersMaidenName = '';
    dateOfBirth = '';
    gender = '';
    // @track phoneNumber = '';
    @track otp = '';          // OTP generated by the system
    @track enteredOtp = '';   // OTP entered by the user
    @track otpSent = false;   // Flag to check if OTP was sent
    @track Aadharotp = '';
    nationality = '';
    maritalStatus = '';
    country = '';
    state = '';
    city = '';
    pinCode = '';
    landmark = '';
    countryP = '';
    stateP = '';
    cityP = '';
    pinCodeP = '';
    landmarkP = '';
    communicationaddress = '';
    permanentaddress = '';
    isSameAsResident = false;
    @track ifscCode = '';
    @track nomineeName = '';
    @track nomineeAddress = '';
    @track nomineeAccNumber = '';
    @track nomineeAge = '';
    @track relationWithDepositor = '';
    @track creditCard = false;
    @track debitCard = false;
    @track panCardNo = '';
    @track openDate = '';
    @track jointAppName1 = '';
    @track jointAppName2 = '';
    @track jointAppName3 = '';
    @track modeOfOperation = '';
    @track modeOfPayment = '';
    @track totalDepositAmount;
    @track physicalAbilityStatus = '';
    @track annualIncome;
    @track isDepositAccountType = false;
    @track accountType = '';
    @track existingAccount = false;
    @track accountNumber = '';
    @track typeOfDeposit = '';
    @track newAccount = '';
    @track interestRate = '';
    @track firstName = '';
    @track lastName = '';
    @track amount = '';
    @track amountInWords = '';
    @track tenure = '';
    @track phoneNumber = '';
    @track phoneNoo='';
    @track phoneNoo2='';
    @track phoneNoo3='';
    @track Docverifystatus = '';
    @track validatePhoneNumber = false;
    @track isPanValid = false;
    @track isVerified = false;
    @track AadharCardno = '';
    @track uploadedFile = ' ';
    @track otpSent1 = false;
    @track enteredAadharOtp = '';
    @track isAadharVerified = false;
    @track fileName = '';         // File name
    @track fileUrl = '';          // File URL for preview
    @track fileSize = '';         // File size
    @track isModalOpen = false;
    @track isImage = false;
    @track isPdf = false;
    @track isUnsupportedFile = false;
    @track isFileUploaded = false;
    @track recordId = '';
    @track phonenofieldofjointapp = false;
    @track phonenofieldofjointapp2 = false;
    @track phonenofieldofjointapp3 = false;
    @track DocverifystatusOptions = [
        { label: 'Pending', value: 'Pending' },
        { label: 'Verified', value: 'Verified' },
        { label: 'Rejected', value: 'Rejected' }
    ];

    formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }




    handleFileUpload(event) {
        const uploadedFiles = event.target.files;
        if (uploadedFiles.length > 0) {
            const file = uploadedFiles[0];

            // Validate file size (3 MB limit)
            const fileSizeLimit = 3 * 1024 * 1024; // 4 MB in bytes
            if (file.size > fileSizeLimit) {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'File Size Error',
                        message: 'The file size limit exceeded. Please upload a smaller file.',
                        variant: 'error'
                    })
                );
                return; // Prevent further execution if file size exceeds the limit
            }

            // Get the file name and size
            this.fileName = file.name;
            this.fileSize = this.formatBytes(file.size);

            // Call readFile to set the fileUrl and file type flags
            this.readFile(file);
            this.isFileUploaded = true;
        }
    }

    readFile(file) {
        const reader = new FileReader();
        reader.onload = () => {
            const fileType = file.type;
            this.fileUrl = reader.result; // Base64 encoded file content

            // Set file type flags
            if (fileType.startsWith('image/')) {
                this.isImage = true;
                this.isPdf = false;
                this.isUnsupportedFile = false;

                // Add the proper Base64 MIME type prefix for images
                this.fileUrl = `data:${fileType};base64,${reader.result.split(',')[1]}`;
            } else if (fileType === 'application/pdf') {
                this.isImage = false;
                this.isPdf = true;
                this.isUnsupportedFile = false;

                // Add the proper Base64 MIME type prefix for PDFs
                this.fileUrl = `data:application/pdf;base64,${reader.result.split(',')[1]}`;
            } else {
                this.isImage = false;
                this.isPdf = false;
                this.isUnsupportedFile = true;
            }

            // Store Base64 encoded file data without the MIME type prefix
            this.uploadedFile = reader.result.split(',')[1]; // Extract Base64 part
        };
        reader.readAsDataURL(file);
    }


    handlePreviewClick() {
        if (this.fileUrl) {
            this.isModalOpen = true;
        }
    }

    closeModal() {
        this.isModalOpen = false;
    }

    handleDeleteClick() {
        this.fileName = '';
        this.fileSize = '';  // Clear the file size
        this.fileUrl = '';
        this.isModalOpen = false;
        this.isImage = false;
        this.isPdf = false;
        this.isUnsupportedFile = false;
        this.isFileUploaded = false;
    }

    toggleAadharVisibility() {
        this.showAadhar = !this.showAadhar;

    }

    get displayAadharCardno() {
        return this.showAadhar ? this.AadharCardno : '********' + this.AadharCardno.slice(-4);
    }


    // @track accountTypeOptions = [
    //     { label: 'Current', value: 'current' },
    //     { label: 'Savings', value: 'savings' },
    //     { label: 'Deposits', value: 'Deposits' },
    //     { label: 'Salary', value: 'salary' }
    // ];
    @track accountTypeOptions = [];

    @wire(getAccountRecordTypes)
    wiredRecordTypes({ error, data }) {
        if (data) {
            this.accountTypeOptions = data.map(recordType => {
                return { label: recordType.Name, value: recordType.Id }; // Assuming recordType has 'Id' and 'Name'
            });
        } else if (error) {
            console.error('Error fetching account record types:', error);
        }
    }


    handleBranchChange(event) {
        this.searchK = event.target.value;
        console.log('handleBranchChange>>');
        if (this.searchK.length > 2) {
            // Call Apex method to search for branches if the input is 3 characters or more
            searchBranches({ searchT: this.searchK })
                .then(result => {
                    this.branches = result;
                })
                .catch(error => {
                    console.error('Error searching branches:', error);
                });
        } else {
            this.branches = null;  // Clear results when input is less than 3 characters
        }
    }

    handleBranchSelect(event) {
        const selectedBranchId = event.currentTarget.dataset.id;
        const selectedBranchName = event.currentTarget.innerText;


        const selectedEvent = new CustomEvent('branchselect', {
            detail: { branchId: selectedBranchId, branchName: selectedBranchName }
        });

        this.dispatchEvent(selectedEvent);

        this.branches = null;
        this.searchK = selectedBranchName;
        this.HomeBranch = selectedBranchId;
    }

    GenderOptions = [
        { label: 'Female', value: 'female' },
        { label: 'Male', value: 'male' },
        { label: 'Other', value: 'other' }
    ];

    MaritalStatusOptions = [
        { label: 'Married', value: 'married' },
        { label: 'Single', value: 'single' }
    ];
    modeOfOperationOptions = [
        { label: 'Self', value: 'Self' },
        { label: 'Either/Survivor', value: 'Either/Survivor' },
        { label: 'Former/Survivor', value: 'Former/Survivor' },
        { label: 'Joint by All', value: 'Joint by All' },
        { label: 'Minor', value: 'Minor' }
    ];

    modeOfPaymentOptions = [
        { label: 'Cash', value: 'Cash' },
        { label: 'Cheque', value: 'Cheque' }
    ];

    physicalAbilityStatusOptions = [
        { label: 'Normal', value: 'Normal' },
        { label: 'Physically Challenged', value: 'Physically Challenged' },
        { label: 'Specially Abled', value: 'Specially Abled' },
        { label: 'Illiterate', value: 'Illiterate' }
    ];
    typeOfDepositoptions = [
        { label: 'Fixed Deposit', value: 'Fixed Deposit' },
        { label: 'Recurring Deposit', value: 'Recurring Deposit' }
    ];

    // Options for Debit Card
    debitCardOptions = [
        { label: 'Coral Debit card', value: 'Coral Debit card' },
        { label: 'Platinum Debit card', value: 'Platinum Debit card' },
        { label: 'Wealth Management Debit card', value: 'Wealth Management Debit card' },
        { label: 'Privilege Debit card', value: 'Privilege Debit card' },
        { label: 'Expressions Signature Debit card', value: 'Expressions Signature Debit card' }
    ];

    // Options for Credit Card
    creditCardOptions = [
        { label: 'Coral Credit card', value: 'Coral Credit card' },
        { label: 'Platinum Credit card', value: 'Platinum Credit card' },
        { label: 'Sapphiro Credit card', value: 'Sapphiro Credit card' },
        { label: 'Rubyx Credit card', value: 'Rubyx Credit card' },
        { label: 'MakeMyTrip Signature Credit card', value: 'MakeMyTrip Signature Credit card' }
    ];

    get debitCardDisabled() {
        return !this.debitCard; // Disables the combobox if debitCard is false (unchecked)
    }

    get creditCardDisabled() {
        return !this.creditCard; // Disables the combobox if creditCard is false (unchecked)
    }

    handleInputChange(event) {
        const field = event.target.dataset.id;
        if (field === 'debitCard') {
            this.debitCard = event.target.checked;
        } else if (field === 'creditCard') {
            this.creditCard = event.target.checked;
        }
    }

    handleAccountTypeChange(event) {
        this.accountType = event.target.value;
        this.isDepositAccountType = this.accountType === '012dM000003Q6jNQAS';

    }

    handleSearchTermChange(event) {
        this.searchKey = event.target.value;
        if (this.searchKey.length > 2) {
            // Call the Apex method when input is 3 characters or more
            searchAccounts({ searchTerm: this.searchKey })
                .then(result => {
                    this.accounts = result;
                })
                .catch(error => {
                    console.error(error);
                });
        } else {
            this.accounts = null;  // Clear results when input is less than 3 characters
        }
    }

    handleAccountSelect(event) {
        // const selectedAccountId = event.currentTarget.dataset.id;
        const selectedAccountId = event.currentTarget.dataset.id;
        const selectedAccountName = event.currentTarget.innerText;

        // Fire an event with the selected account details
        const selectedEvent = new CustomEvent('accountselect', {
            detail: { accountId: selectedAccountId, accountName: selectedAccountName }
        });

        this.dispatchEvent(selectedEvent);

        // Clear the account list after selection
        this.accounts = null;
        this.searchKey = selectedAccountName;  // Set the input value to the selected account name


        this.newAccount = selectedAccountId;

    }


    get isStep1() {

        return this.currentStep === 'step1';
    }

    get isStep2() {
        return this.currentStep === 'step2';
    }

    get isStep3() {
        return this.currentStep === 'step3';
    }

    get isStep4() {
        return this.currentStep === 'step4';
    }
    // get isStep5() {
    //     return this.currentStep === 'step5';
    // }

    get isFirstStep() {
        return this.currentStep === 'step1';
    }

    get isLastStep() {
        return this.currentStep === 'step4';
    }

    // handleInputChange(event) {
    //     // const field = event.target.dataset.id;
    //     // this[field] = event.target.value;

    //     const field = event.target.dataset.id;
    //     let value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;
    //     //  this[field] = value;
    //     if(field =='panCardNo'){
    //           value = value.toUpperCase();
    //            this.isVerified = false; 
    //     }

    //      this[field] = value;
    //     if (this.isSameAsResident) {
    //         this.syncPermanentAddress();
    //     }

    // }
    handleInputChange(event) {
        const field = event.target.dataset.id;
        let value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;

        if (field === 'panCardNo') {
            value = value.toUpperCase();  // Convert PAN card number to uppercase
            this.isVerified = false;      // Reset verification state when PAN changes
        }
        if (field === 'AadharCardno') {
            this.isAadharVerified = false;      // Reset verification state when PAN changes
        }



        if (field === 'jointAppName1') {
            if (value.length >= 3) {
                this.phonenofieldofjointapp = true;
            } else {
                this.phonenofieldofjointapp = false; // If it's 4 or less characters or cleared, set to false
            }
        }
        if (field === 'jointAppName2') {
            if (value.length >= 3) {
                this.phonenofieldofjointapp2 = true;
            } else {
                this.phonenofieldofjointapp2 = false; // If it's 4 or less characters or cleared, set to false
            }
        }
        if (field === 'jointAppName3') {
            if (value.length >= 3) {
                this.phonenofieldofjointapp3 = true;
            } else {
                this.phonenofieldofjointapp3 = false; // If it's 4 or less characters or cleared, set to false
            }
        }

        this[field] = value;
        console.log(`${field}: `, this[field]);

        if (this.isSameAsResident) {
            this.syncPermanentAddress();
        }

    }

    handleCheckboxChange(event) {
        this.isSameAsResident = event.target.checked;

        if (this.isSameAsResident) {
            this.syncPermanentAddress();
        } else {
            this.countryP = '';
            this.stateP = '';
            this.cityP = '';
            this.pinCodeP = '';
            this.landmarkP = '';
            this.permanentaddress = '';
        }
    }

    syncPermanentAddress() {
        this.countryP = this.country;
        this.stateP = this.state;
        this.cityP = this.city;
        this.pinCodeP = this.pinCode;
        this.landmarkP = this.landmark;
        this.permanentaddress = this.communicationaddress;
    }

    // handleNext() {
    //     const currentIndex = this.steps.findIndex(step => step.value === this.currentStep);
    //     if (currentIndex < this.steps.length - 1) {
    //         this.currentStep = this.steps[currentIndex + 1].value;
    //     }
    // }


    // generateOtp() {

    //     this.otp = Math.floor(100000 + Math.random() * 900000).toString();

    //     // Simulate sending OTP to the user's phone number (for now, we'll just log it)
    //     console.log(`OTP sent to ${this.phoneNumber}: ${this.otp}`);

    //     // Set the flag to indicate OTP was sent
    //     this.otpSent = true;

    //     // Show toast that OTP was sent (in real scenario, you'd integrate with an SMS API here)
    //     // this.showToast('Success', 'OTP sent to your phone number ', 'success');
    //     this.showToast('Success', `OTP ${this.otp} sent to your phone number`, 'success');
    // }
    async generateOtp() {

        this.sendotpbutton = true;
        // Await the duplicate check
        try {
            const isDuplicate = await this.checkduplicate();
            if (isDuplicate) {
                return; // Stop further execution if a duplicate is found
            }
        } catch (error) {
            console.error('Error checking for duplicates:', error);
            this.showToast('Error', 'An error occurred while checking for duplicates.', 'error');
            return;
        }

        if (this.panCardNo.length === 10) {

            // Regex to match the PAN format (AAAAA9999A)
            const panCardPattern = /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/;

            if (panCardPattern.test(this.panCardNo)) {

                this.otp = Math.floor(100000 + Math.random() * 900000).toString();

                console.log(`OTP for PANCard Verification sent to ${this.phoneNumber}: ${this.otp}`);



                this.otpSent = true;
                this.showToast('Success', `OTP ${this.otp}  for PANCard Verification sent to your phone number`, 'success');
            } else {
                this.showToast('Error', 'Invalid PAN Card number. Format should be AAAAA9999A', 'error');
            }

        } else {
            this.showToast('Error', 'PAN Card number must be exactly 10 characters', 'error');
        }
    }

    verifyOtp() {
        console.log(`Entered OTP: ${this.enteredOtp}, Generated OTP: ${this.otp}`);

        if (this.enteredOtp === this.otp) {
            // OTP matches
            this.showToast('Success', 'PAN Card verification successful', 'success');
            this.otpSent = false;
            this.enteredOtp = '';
            this.isVerified = true;
        } else {
            this.showToast('Error', 'Invalid OTP. Please try again.', 'error');
            this.isVerified = false;
        }
    }
    // Aadhar Card OTP generation and verification logic
    generateAadharOtp() {

        this.sendaadharotpbutton = true;
        console.log('OTP generated for Aadhar Card');

        const aadharPattern = /^[0-9]{12}$/; // Aadhaar number should be exactly 12 digits 
        if (this.AadharCardno.length === 12) {
            if (aadharPattern.test(this.AadharCardno)) {
                this.Aadharotp = Math.floor(100000 + Math.random() * 900000).toString();
                console.log(`OTP for Aadhar Verification sent to ${this.phoneNumber}: ${this.Aadharotp}`);
                this.otpSent1 = true;
                this.showToast('Success', `OTP ${this.Aadharotp} for Aadhar Verification sent to your phone number`, 'success');

            } else {
                this.showToast('Error', 'Invalid Aadhaar number ', 'error');
            }
        } else {
            this.showToast('Error', 'Aadhaar number must be exactly 12 digits', 'error');
        }
    }

    VerifyAadharOtp() {
        console.log(`Entered OTP: ${this.enteredAadharOtp}, Generated OTP: ${this.Aadharotp}`);
        if (this.enteredAadharOtp === this.Aadharotp) {  // Example OTP verification
            this.showToast('Success', 'Aadhar verification successful', 'success');
            this.isAadharVerified = true;
            this.otpSent1 = false;
            this.enteredAadharOtp = '';
            console.log('Aadhar OTP verified successfully');
        } else {
            this.isAadharVerified = false;
            console.log('Incorrect Aadhar OTP');
            this.showToast('Error', 'Invalid OTP. Please try again.', 'error');
        }
    }

    //   handleNext() {
    //     console.log('handlenext');
    //         // Validate inputs in the current step
    //         if (['step1', 'step2', 'step3', 'step4'].includes(this.currentStep)) {
    //             // Validate all lightning-input fields
    //             const allValid = [...this.template.querySelectorAll('lightning-input')]
    //                 .reduce((validSoFar, inputCmp) => validSoFar && inputCmp.reportValidity(), true);

    //             // Halt if any input field is invalid
    //             if (!allValid) {
    //                 this.showToast('Error', 'Please complete all required fields.', 'error');
    //                 return;
    //             }

    //             // Step-specific validations
    //             if (this.currentStep == 'step1') {

    //                 console.log('currentStep>>>1');
    //                 if (!this.phoneNumber || this.phoneNumber.length !== 10) {
    //                     this.showToast('Error', 'Phone number must be exactly 10 digits.', 'error');
    //                     return;
    //                 }

    //                 // Validate Date of Birth (DOB) not being in the future
    //                 const today = new Date();
    //                 const dob = new Date(this.dateOfBirth);
    //                 if (dob > today) {
    //                     this.showToast('Error', 'Date of Birth cannot be a future date.', 'error');
    //                     return;
    //                 }
    //                 this.checkduplicate();
    //             //     console.log('isduplicate before>>>');
    //             // const isDuplicate = await this.checkduplicate();
    //             // if (isDuplicate) {
    //             //     return; // Stop further execution if a duplicate is found
    //             // }

    //             }

    //             if (this.currentStep === 'step2') {
    //                 // Validate PAN card length
    //                 if (!this.panCardNo || this.panCardNo.length !== 10) {
    //                     this.showToast('Error', 'Enter a valid PAN card number.', 'error');
    //                     return;
    //                 }

    //                 // Validate open date being today
    //                 const today = new Date().toISOString().split('T')[0]; // Format date to yyyy-mm-dd
    //                 if (this.openDate !== today) {
    //                     this.showToast('Error', 'Open date should be today.', 'error');
    //                     return;
    //                 }
    //             }
    //             if (this.currentStep === 'step3') {

    //                 if (this.Docverifystatus == '') {  // Check if it's empty or undefined
    //                     this.showToast('Error', 'You must enter the document verification status.', 'error');
    //                     return;
    //                 }
    //                 if (this.Docverifystatus == 'Rejected') {
    //                     this.showToast('Error', 'You cannot proceed with account creation as document verification is rejected.', 'error');
    //                     return;
    //                 }
    //                 if (this.Docverifystatus == 'Verified') {
    //                     // Show success message if the document verification status is 'verified'
    //                     this.showToast('Success', 'Document verification successful.', 'success');
    //                 }

    //             }
    //         }

    //         // Proceed to the next step if validation passes
    //         const currentIndex = this.steps.findIndex(step => step.value === this.currentStep);
    //         if (currentIndex < this.steps.length - 1) {
    //             this.currentStep = this.steps[currentIndex + 1].value;
    //         }
    //     }
    // }
    // async checkduplicate() {
    //     try {
    //         const result = await checkDuplicateAccount({ phoneNumber: this.phoneNumber, recordTypeId: this.accountType });
    //         if (result) {
    //             console.log('Duplicate account found:', result);
    //             this.showToast('Error', 'An account with the same details and account type already exists.', 'error');
    //             return true; // Indicate that a duplicate exists
    //         } else {
    //             this.showToast('Success', 'No duplicate account found. Proceeding to the next step.', 'success');
    //             return false; // No duplicates found
    //         }
    //     } catch (error) {
    //         this.showToast('Error', 'Error checking duplicate accounts: ' + error.body.message, 'error');
    //         return true; // Consider it a duplicate if there is an error
    //     }
    // }

    handleNext() {
        console.log('handleNext called, current step:', this.currentStep);
        // Validate inputs in the current step
        if (['step1', 'step2', 'step3', 'step4'].includes(this.currentStep)) {
            // Validate all lightning-input fields
            const allValid = [...this.template.querySelectorAll('lightning-input')]
                .reduce((validSoFar, inputCmp) => validSoFar && inputCmp.reportValidity(), true);

            // Halt if any input field is invalid
            if (!allValid) {
                this.showToast('Error', 'Please complete all required fields.', 'error');
                return;
            }

            // Step-specific validations
            if (this.currentStep === 'step1') {
                console.log('Validating Step 1');
                if (!this.phoneNumber || this.phoneNumber.length !== 10) {
                    this.showToast('Error', 'Phone number must be exactly 10 digits.', 'error');
                    return;
                }

                // Validate Date of Birth (DOB) not being in the future
                const today = new Date();
                const dob = new Date(this.dateOfBirth);
                if (dob > today) {
                    this.showToast('Error', 'Date of Birth cannot be a future date.', 'error');
                    return;
                }

                // // Await the duplicate check
                // try {
                //     const isDuplicate = await this.checkduplicate();
                //     if (isDuplicate) {
                //         return; // Stop further execution if a duplicate is found
                //     }
                // } catch (error) {
                //     console.error('Error checking for duplicates:', error);
                //     this.showToast('Error', 'An error occurred while checking for duplicates.', 'error');
                //     return;
                // }
            }

            if (this.currentStep === 'step2') {
                console.log('Validating Step 2');
                // Validate PAN card length
                if (!this.panCardNo || this.panCardNo.length !== 10) {
                    this.showToast('Error', 'Enter a valid PAN card number.', 'error');
                    return;
                }

                // Validate open date being today
                const today = new Date().toISOString().split('T')[0]; // Format date to yyyy-mm-dd
                if (this.openDate !== today) {
                    this.showToast('Error', 'Open date should be today.', 'error');
                    return;
                }
                const phoneNumbers = [this.phoneNoo, this.phoneNoo2, this.phoneNoo3];
const jointAppFields = [this.phonenofieldofjointapp, this.phonenofieldofjointapp2, this.phonenofieldofjointapp3];

// Check if any joint application phone field is active and invalid
if (phoneNumbers.some((phone, index) => jointAppFields[index] && (!phone || phone.length !== 10))) {
    this.showToast('Error', 'Each phone number must be exactly 10 digits.', 'error');
    return;
}




            }

            if (this.currentStep === 'step3') {
                console.log('Validating Step 3');
                if (this.Docverifystatus == '') {  // Check if it's empty or undefined
                    this.showToast('Error', 'You must enter the document verification status.', 'error');
                    return;
                }
                if (this.Docverifystatus == 'Rejected') {
                    this.showToast('Error', 'You cannot proceed with account creation as document verification is rejected.', 'error');
                    return;
                }
                if (this.Docverifystatus == 'Verified') {
                    // Show success message if the document verification status is 'verified'
                    this.showToast('Success', 'Document verification successful.', 'success');
                }
            }
        }

        // Proceed to the next step if validation passes
        const currentIndex = this.steps.findIndex(step => step.value === this.currentStep);
        if (currentIndex < this.steps.length - 1) {
            this.currentStep = this.steps[currentIndex + 1].value;
        }
        window.scrollTo({ top: 0, behavior: 'smooth' });
        const element = this.template.querySelector('.main-content');
        if (element) {
            console.log('element>>>', element);
            if (element.scrollTop === 0) {
                console.log('Scrolled to the top');

            } else if (element.scrollTop + element.clientHeight >= element.scrollHeight) {
                console.log('Scrolled to the bottom');
            }

            // Reset scroll to the top
            element.scrollTo({ top: 0, behavior: 'smooth' });
        } else {
            console.error('main-content element not found');
        }
    }

    // async checkduplicate() {
    //     console.log('Checking for duplicate account');
    //     try {
    //         const result = await checkDuplicateAccount({ phoneNumber: this.phoneNumber, recordTypeId: this.accountType });
    //         if (result) {
    //             console.log('Duplicate account found:', result);
    //             this.showToast('Error', 'An account with the same details and account type already exists.', 'error');
    //             return true; // Indicate that a duplicate exists
    //         } else {
    //             this.showToast('Success', 'No duplicate account found. Proceeding to the next step.', 'success');
    //             return false; // No duplicates found
    //         }
    //     } catch (error) {
    //         console.error('Error in checkduplicate:', error);
    //         this.showToast('Error', 'Error checking duplicate accounts: ' + error.body.message, 'error');
    //         return true; // Consider it a duplicate if there is an error
    //     }
    // }
    async checkduplicate() {
        console.log('Checking for duplicate account');
        try {
            const result = await checkIfAccountExists({ Pancardno: this.panCardNo, recordTypeId: this.accountType });
            if (result) {
                console.log('Duplicate account found:', result);
                this.showToast('Error', 'An account with the PanCardNo and account type already exists.', 'error');
                return true; // Indicate that a duplicate exists
            } else {
                this.showToast('Success', 'No duplicate account found. Proceeding to the next step.', 'success');
                return false; // No duplicates found
            }
        } catch (error) {
            console.error('Error in checkduplicate:', error);

            // Check if the error has a message or any useful properties
            if (error.body && error.body.message) {
                this.showToast('Error', 'Error checking duplicate accounts: ' + error.body.message, 'error');
            } else {
                this.showToast('Error', 'Error checking duplicate accounts: ' + JSON.stringify(error), 'error');
            }
            return true; // Consider it a duplicate if there is an error
        }
    }



    showToast(title, message, variant) {
        const event = new ShowToastEvent({
            title: title,
            message: message,
            variant: variant,
        });
        this.dispatchEvent(event);
    }
    handlePrevious() {
        const currentIndex = this.steps.findIndex(step => step.value === this.currentStep);
        if (currentIndex > 0) {
            this.currentStep = this.steps[currentIndex - 1].value;
        }
    }

    @track accid = '';
    handleSave() {
        const newAccount = {
            FirstName__c: this.firstName, // Make sure to use the correct API name
            Last_Name__c: this.lastName,     // Ensure this matches the field name
            Father_sName__c: this.fathersName,
            Mother_sName__c: this.mothersName,
            Mother_sMaidenName__c: this.mothersMaidenName,
            DateOfBirth__c: this.dateOfBirth,
            MaritalStatus__c: this.maritalStatus,
            Phone_number__c: this.phoneNumber,
            Nationality__c: this.nationality,
            Gender__c: this.gender,
            Home_Branch__c: this.HomeBranch,
            X1st_Joint_Application_Name__c: this.jointAppName1,
            X2nd_Joint_Application_Name__c: this.jointAppName2,
            X3rd_Joint_Application_Name__c: this.jointAppName3,
            Mode_Of_Operation__c: this.modeOfOperation,
            Mode_Of_Payment__c: this.modeOfPayment,
            PANCardNo__c: this.panCardNo,
            Open_Date__c: this.openDate,
            Total_Deposit_Amount__c: this.totalDepositAmount,
            Status__c: this.physicalAbilityStatus,
            Annual_Income__c: this.annualIncome,
            Existing_Account__c: this.existingAccount,
            New_Account__c: this.newAccount,
            Tenure_In_Months__c: this.tenure,
            Interest_Rate__c: this.interestRate,
            Type_Of_Deposits__c: this.typeOfDeposit,
            Amount__c: this.amount,
            Amount_In_Words__c: this.amountInWords,
            RecordTypeId: this.accountType,
            Document_Verification_Status__c: this.Docverifystatus,
            CommunicationResidentAddress__c: this.communicationaddress,
            Landmark__c: this.landmark,
            Landmark_P__c: this.landmarkP,
            City__c: this.city,
            City_P__c: this.cityP,
            Country__c: this.country,
            Country_P__c: this.countryP,
            State__c: this.state,
            State_P__c: this.stateP,
            Permanent_Address__c: this.permanentaddress,
            PinCode__c: this.pinCode,
            PinCode_P__c: this.pinCodeP,
            Same_as_Resident_Address__c: this.isSameAsResident,
            Aadhar_Number__c: this.AadharCardno,


        };

        // Call Apex to create the new account
        insertnewaccount({ newaccount: newAccount })
            .then(result => {
                const accountId = result;  // The newly created Account ID
                console.log('accountid>>>>' + accountId);
                // Show success toast for account creation
                this.accid = result;
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Bank Account created successfully',
                        variant: 'success'
                    })
                );


                // Now create the Joint Applicants if any
                this.createJointApplicants(); // Call the method to create joint applicants


                if (this.uploadedFile) {
                    this.uploadFileToAccount(accountId, this.uploadedFile, this.fileName);
                } else {
                    this.handlenavigation(accountId);
                }


                this.showAadhar = false;
                this.clearFields();  

                 this[NavigationMixin.Navigate]({
                type: 'standard__recordPage',
                attributes: {
                    recordId: result, 
                    objectApiName: 'New_Account__c',
                    actionName: 'view'
                }
            });

            this.dispatchEvent(new CustomEvent('save'));

            })
            .catch(error => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error creating record',
                        message: error.body.message,
                        variant: 'error'
                    })
                );
            });
    }


    uploadFileToAccount(accountId, base64Data, fileName) {
        // Call the Apex method to upload the file to ContentVersion
        uploadFile({
            base64Data: base64Data,
            fileName: fileName,
            recordId: accountId
        })
            .then(() => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'File uploaded successfully',
                        variant: 'success'
                    })
                );
                // Navigate to account details page after file upload is successful
                // this.handlenavigation(accountId);
            })
            .catch(error => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error uploading file',
                        message: error.body.message,
                        variant: 'error'
                    })
                );
            });
    }

    createJointApplicants() {
        // Collect the names and phone numbers from the form inputs
        const jointAppNames = [this.jointAppName1, this.jointAppName2, this.jointAppName3];
        const phoneNumbers = [this.phoneNoo, this.phoneNoo2, this.phoneNoo3];

        //     console.log('createJointApplicants>>>');
        //     console.log('jointAppNames>>>'+jointAppNames);
        //    console.log('phoneNumbers>>>'+phoneNumbers);
        //     // Filter valid joint applicants (both name and phone must be provided)
        //     const validJointApplicants = jointAppNames
        //         .map((name, index) => {
        //             return { name: name, phone: phoneNumbers[index] };
        //         })
        //         .filter(applicant => applicant.name && applicant.phone);  // Only include non-empty values
        //     //     const validJointApplicants = [
        //     // { name: 'Test Name', phone: '1234567890' }
        //     //       ];


        //     console.log('validJointApplicants: ', validJointApplicants);
        //     console.log('Valid Joint Applicants to send: ', JSON.stringify(validJointApplicants));


        //     if (validJointApplicants.length > 0) {
        //         // Call Apex method to create Joint Applicants
        //         createJointApplicantsss({ jointApplicants: JSON.stringify(validJointApplicants), accountId: this.accid })
        //             .then(() => {
        //                 console.log('Payload sent to Apex: ', JSON.stringify({ jointApplicants: validJointApplicants, accountId: this.accid }));

        //                 console.log('Joint applicants created successfully');
        //                 // Dispatch success toast message
        //                 this.dispatchEvent(
        //                     new ShowToastEvent({
        //                         title: 'Success',
        //                         message: 'Joint applicants created successfully',
        //                         variant: 'success'
        //                     })
        //                 );
        //             })
        //             .catch(error => {
        //                 console.error('Error creating joint applicants: ', error);
        //                 // Dispatch error toast message
        //                 this.dispatchEvent(
        //                     new ShowToastEvent({
        //                         title: 'Error',
        //                         message: 'Error creating joint applicants: ' + error.body.message,
        //                         variant: 'error'
        //                     })
        //                 );
        //             });
        //     } 
        const validJointApplicants = jointAppNames
            .map((name, index) => {
                return { name: name, phone: phoneNumbers[index] };
            })
            .filter(applicant => applicant.name && applicant.phone);

        console.log('Valid Joint Applicants to send: ', JSON.stringify(validJointApplicants));

        if (validJointApplicants.length > 0) {
            createJointApplicantsss({ jointApplicants: validJointApplicants, accountId: this.accid })
                .then(() => {
                    console.log('Joint applicants created successfully');
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'Success',
                            message: 'Joint applicants created successfully',
                            variant: 'success'
                        })
                    );
                })
                .catch(error => {
                    console.error('Error creating joint applicants: ', error);
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'Error',
                            message: 'Error creating joint applicants: ' + error.body.message,
                            variant: 'error'
                        })
                    );
                });
        }
        else {
            // If no valid joint applicants found, show a message
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'No Joint Applicants',
                    message: 'Please provide both name and phone number for joint applicants.',
                    variant: 'warning'
                })
            );
        }
    }




    //     handlenavigation(accountId) {
    //     console.log('handlenavigation >>>>>>>>>>>>'+accountId);
    //     this[NavigationMixin.Navigate]({
    //         type: 'standard__webPage',
    //         attributes: {
    //             url: `https://companycom-45b-dev-ed.develop.my.site.com/EliteFinance/s/accountdetails?recordId=${accountId}`
    //         }
    //     });
    // }


    clearFields() {
        this.uploadedFile = '';
        this.searchK = '';
        this.AadharCardno = '';
        this.uploadedFile = '';
        this.firstName = '';
        this.lastName = '';
        this.fathersName = '';
        this.mothersName = '';
        this.mothersMaidenName = '';
        this.dateOfBirth = null;
        this.maritalStatus = '';
        this.phoneNumber = '';
        this.nationality = '';
        this.gender = '';
        this.HomeBranch = '';
        this.jointAppName1 = '';
        this.jointAppName2 = '';
        this.jointAppName3 = '';
        this.modeOfOperation = '';
        this.modeOfPayment = '';
        this.panCardNo = '';
        this.openDate = null;
        this.totalDepositAmount = null;
        this.physicalAbilityStatus = '';
        this.annualIncome = null;
        this.existingAccount = false;
        this.newAccount = false;
        this.tenure = null;
        this.interestRate = null;
        this.typeOfDeposit = '';
        this.amount = null;
        this.amountInWords = '';
        this.accountType = '';
        this.Docverifystatus = '';
        this.communicationaddress = '';
        this.landmark = '';
        this.landmarkP = '';
        this.city = '';
        this.cityP = '';
        this.country = '';
        this.countryP = '';
        this.state = '';
        this.stateP = '';
        this.permanentaddress = '';
        this.pinCode = '';
        this.pinCodeP = '';
        this.isSameAsResident = false;
    }
}